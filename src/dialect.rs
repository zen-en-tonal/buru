mod sqlite;

/// The current SQL dialect used at compile time, determined by feature flags.
#[cfg(feature = "sqlite")]
pub type CurrentDialect = sqlite::SqliteDialect;

/// A trait for SQL dialects to support database-specific query generation.
///
/// This trait provides methods that return SQL strings compatible with the
/// target database (e.g., SQLite, PostgreSQL, MySQL). The goal is to abstract
/// away differences in placeholder syntax, conditional insert behavior, and
/// DELETE/SELECT semantics so that higher-level logic can remain dialect-agnostic.
pub trait Dialect {
    /// Returns the SQL placeholder syntax for the given parameter index.
    ///
    /// - SQLite: `?`
    /// - PostgreSQL: `$1`, `$2`, ...
    ///
    /// # Parameters
    /// - `idx`: The 1-based parameter index (used in dialects that number placeholders).
    fn placeholder(idx: usize) -> String;

    /// Returns a SQL `EXISTS` subquery to check if an image is tagged with a given tag.
    ///
    /// The returned SQL should be used within a WHERE clause and include a placeholder
    /// for the tag name.
    fn exists_tag_query(idx: usize) -> String;

    fn exists_date_until_query(idx: usize) -> String;

    fn exists_date_since_query(idx: usize) -> String;

    /// Returns the SQL statement to ensure an image exists in the `images` table.
    ///
    /// Usually implemented as an insert that ignores duplicates (e.g., `INSERT OR IGNORE`).
    fn ensure_image_statement() -> &'static str;

    /// Returns the SQL statement to ensure a tag exists in the `tags` table.
    ///
    /// Should insert the tag name only if it doesn't already exist.
    fn ensure_tag_statement() -> &'static str;

    fn ensure_metadata_statement() -> &'static str;

    /// Returns the SQL statement to ensure a tag is attached to an image.
    ///
    /// Should insert a `(image_hash, tag_name)` pair into the `image_tags` table
    /// without duplicating existing entries.
    fn ensure_image_tag_statement() -> &'static str;

    /// Returns a full SELECT statement for retrieving image hashes that match
    /// the given condition clause.
    ///
    /// # Parameters
    /// - `condition`: The SQL fragment (e.g., WHERE clause) generated by the query module.
    fn query_image_statement(condition: String) -> String;

    /// Returns the SQL statement to retrieve all tags for a given image hash.
    ///
    /// Should return a single-column result (`tag_name`).
    fn query_tags_by_image_statement() -> &'static str;

    fn query_metadata_statement() -> &'static str;

    /// Returns the SQL statement to remove a tag from an image.
    ///
    /// This should delete a row from the `image_tags` table based on
    /// both `image_hash` and `tag_name`.
    fn delete_image_tag_statement() -> &'static str;

    /// Returns the SQL statement to delete an image from the `images` table.
    ///
    /// Typically used in combination with a `DELETE` from `image_tags`.
    fn delete_image_statement() -> &'static str;

    /// Returns the SQL statement to delete all tags associated with an image.
    ///
    /// This removes all rows from `image_tags` where `image_hash` matches.
    fn delete_tags_by_image_statement() -> &'static str;

    fn migration() -> Vec<&'static str>;
}
